package org.saltations.mre.common.core.errors;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import io.micronaut.http.uri.UriBuilder;
import io.micronaut.problem.HttpStatusType;
import io.micronaut.serde.annotation.Serdeable;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;

import static java.text.MessageFormat.format;

/**
 * Extendable base class that represents an internal error. Contains the elements needed to map to a RFC 7807 Problem.
 * <p>
 * RFC 7807 provides a problem format that looks like this
 * </p>
 * <pre>
 *    HTTP/1.1 403 Forbidden
 *    Content-Type: application/problem+json
 *    Content-Language: en
 *
 *    {
 *     "type": "https://example.com/probs/out-of-credit",
 *     "title": "You do not have enough credit.",
 *     "detail": "Your current balance is 30, but that costs 50."
 *    }
 * </pre>
 * RFC 7807 allows for the addition of properties such as
 * <pre>
 *    HTTP/1.1 403 Forbidden
 *    Content-Type: application/problem+json
 *    Content-Language: en
 *
 *    {
 *     "type": "https://example.com/probs/out-of-credit",
 *     "title": "You do not have enough credit.",
 *     "detail": "Your current balance is 30, but that costs 50.",
 *     "trace_id": "specific-id",
 *      "account" : 126811
 *    }
 * </pre>
 * <p>
 * This base class will also generate a unique {@code trace_id} property for all instances of the problem
 * </p>
 *
 * @implNote This base class does not store the 'type' member from RFC 7807. It generates the 'type' member from
 * the contents of the 'title' property.
 */

@Getter
@Setter
@Accessors(fluent = true)
@Serdeable
public class DomainProblemBase extends Exception implements DomainProblem
{
    /**
     * A short, human-readable summary of the problem <em>type</em>.
     * <p>
     * This should not change from occurrence to
     * occurrence of the problem except for the purposes of localization.
     *
     * @see <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807</a>.
     */

    private final String title;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     *
     * @see <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807</a>.
     */

    private final String detail;

    /**
     * Maps to 'status' which is the HTTP status code generated by the origin server for <em>this occurrence</em> of the problem.
     *
     * @see <a href="https://datatracker.ietf.org/doc/html/rfc7807">RFC 7807</a>.
     */

    private HttpStatusType statusType;

    /**
     * Extension properties
     */

    private final Map<String,Object> extensionPropertiesByName = new HashMap<>();

    /**
     * @param problemType    endpoint suffix used to create the 'type' member from RFC 7807
     * @param title          a short, human-readable summary of the problem <em>type</em>
     * @param detailTemplate a template using the argument and formatting conventions of {@link java.text.MessageFormat}
     * @param args           0 or more variable arguments for formatting in the detail template
     */

    public DomainProblemBase(String problemType, String title, String detailTemplate, Object...args)
    {
        super(title + ":" + format(detailTemplate, args));
        this.title = title;
        this.detail = format(detailTemplate, args);

        extensionPropertiesByName.put("trace_id", UUID.randomUUID().toString());
    }

    /**
     * @param cause          exception that is the root cause of the problem
     * @param problemType    endpoint suffix used to create the 'type' member from RFC 7807
     * @param title          a short, human-readable summary of the problem <em>type</em>
     * @param detailTemplate a template using the argument and formatting conventions of {@link java.text.MessageFormat}
     * @param args           0 or more variable arguments for formatting in the detail template
     */

    public DomainProblemBase(Throwable cause, String problemType, String title, String detailTemplate, Object...args)
    {
        super(title + ":" + format(detailTemplate, args), cause);
        this.title = title;
        this.detail = format(detailTemplate, args);

        extensionPropertiesByName.put("trace_id", UUID.randomUUID().toString());
        extensionPropertiesByName.put("problem-type", problemType);
    }

    /**
     * Expands a given root URI with a path parameter of {@code problem-type}
     * <p>
     * The root URI must contain a path parameter with the name  {@code problem-type} so that this
     * </p>
     * <pre>
     * https://example.com/probs/{problem-type}
     * </pre>
     * <p>
     * expands to something like
     * </p>
     * <pre>
     * https://example.com/probs/validation-error
     * </pre>
     *
     * @param problemTypeRootURI    the root of the problem endpoint with a path parameter of {@code problem-type}
     *
     * @return Expanded URI.
     */

    public URI expandType(URI problemTypeRootURI)
    {
       return UriBuilder.of(problemTypeRootURI).expand(extensionPropertiesByName);
    }

}
